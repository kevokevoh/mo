# Develop a basic MVP to a group of early adopters that moves a lead through the funnel based on certain criteria theyâ€™ve met.
- Detail the backend requirements to support your app and onboarding flow.
- Develop an automated funnel that enables conversion, onboarding, and sends the customer a request for deposit payment. 

## API ROUTES
POST /api/v2/users - Create user

GET /api/v2/users - List users

PUT /api/v2/users/{id} - Update user

POST /api/v2/leads - Create new lead

GET /api/v2/leads/{id} - Get lead details

PUT /api/v2/leads/{id} - Update lead information

DELETE /api/v2/leads/{id} - Delete lead

POST /api/v2/leads/{id}/qualify - Trigger lead qualification(After KYC or some algo calculations)

POST /api/v2/leads/{id}/convert - Mark lead as converted (User consented to take up loan)

POST /api/v2/leads/{id}/onboard - Start onboarding process (Associate user with product and other backend tasks)

GET /api/v2/leads/{id}/onboarding-status - Check onboarding progress

POST /api/v2/leads/{id}/request-deposit - Initiate deposit payment request

## DB Schema
### Merchants
CREATE TABLE merchants (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    email VARCHAR(100) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

### Agents
CREATE TABLE agents (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    merchant_id INT REFERENCES merchants(id) ON DELETE SET NULL, -- Foreign key referencing merchants
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

### Leads
CREATE TABLE leads (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    contact_info TEXT NOT NULL,
    status VARCHAR(50) NOT NULL, -- e.g., "new", "qualified", "converted"
    kyc_status VARCHAR(50) NOT NULL, -- e.g., "pending", "approved"
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

### Products
CREATE TABLE products (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

### Lead Management
CREATE TABLE lead_management (
    lead_id INT REFERENCES leads(id),
    agent_id INT REFERENCES agents(id),
    merchant_id INT REFERENCES merchants(id), -- Optional, as agents can work independently
    product_id INT REFERENCES products(id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (lead_id, agent_id, product_id)
);

### Onboarding Process
CREATE TABLE onboarding_process (
    id SERIAL PRIMARY KEY,
    lead_id INT REFERENCES leads(id),
    product_id INT REFERENCES products(id),
    status VARCHAR(50) NOT NULL, -- e.g., "initiated", "in_progress", "completed"
    progress TEXT NOT NULL, -- e.g., "document verification", "account creation"
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

### Deposit Requests
CREATE TABLE deposit_requests (
    id SERIAL PRIMARY KEY,
    lead_id INT REFERENCES leads(id),
    product_id INT REFERENCES products(id),
    amount DECIMAL(10, 2) NOT NULL,
    status VARCHAR(50) NOT NULL, -- e.g., "initiated", "completed"
    payment_method VARCHAR(50) NOT NULL, -- e.g., "credit card", "bank transfer"
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


## Interesting querries

### SAMPLE DATA
#### MERCHANTS
INSERT INTO merchants (username, email, password)
VALUES 
('merchant1', 'merchant1@example.com', 'hashed_password1'),
('merchant2', 'merchant2@example.com', 'hashed_password2');

#### AGENTS
INSERT INTO agents (name, email, merchant_id)
VALUES 
('Agent A', 'agentA@example.com', 1),  -- Associated with Merchant 1
('Agent B', 'agentB@example.com', 1),  -- Associated with Merchant 1
('Agent C', 'agentC@example.com', 2);  -- Associated with Merchant 2

#### LEADS
INSERT INTO leads (id, name, contact_info, status, kyc_status)
VALUES 
(1, 'John Doe', 'john@example.com', 'converted', 'approved'),
(2, 'Jane Smith', 'jane@example.com', 'qualified', 'approved');

#### Products
INSERT INTO products (id, name, description)
VALUES 
(1, 'Infinix I7', 'A 5G enabled phone'),
(2, 'Xiaomi X7', 'A phone with excellent battery life');

#### Lead Mngt
INSERT INTO lead_management (lead_id, agent_id, product_id)
VALUES
(1, 1, 1),  -- Lead 1 handled by Agent A for Product 1
(1, 2, 2),  -- Lead 1 handled by Agent B for Product 2
(2, 3, 1);  -- Lead 2 handled by Agent C for Product 1

#### Onboarding Process
INSERT INTO onboarding_process (id, lead_id, product_id, status, progress, created_at)
VALUES
(1, 1, 1, 'new', 'lead created', '2024-01-01 10:00:00'),
(2, 1, 2, 'in_progress', 'kyc verification', '2024-02-01 10:00:00'),
(3, 2, 1, 'completed', 'user account created', '2024-01-15 15:00:00'),
(4, 1, 1, 're-issue', 're-onboarding for upgrade', '2024-03-01 12:00:00');



### Get users ie completed the onboarding process(Index querry)
SELECT
    l.id AS lead_id,
    l.name AS lead_name,
    l.contact_info,
    l.status AS lead_status,
    l.kyc_status,
    op.status AS onboarding_status,
    op.progress,
    p.name AS product_name
FROM
    leads l
JOIN
    onboarding_process op ON l.id = op.lead_id
JOIN
    products p ON op.product_id = p.id
WHERE
    op.status = 'completed';

### Have the user paid

SELECT
    l.id AS lead_id,
    l.name AS lead_name,
    l.contact_info,
    l.status AS lead_status,
    l.kyc_status,
    op.status AS onboarding_status,
    op.progress,
    p.name AS product_name,
    dr.status AS deposit_status
FROM
    leads l
JOIN
    onboarding_process op ON l.id = op.lead_id
JOIN
    products p ON op.product_id = p.id
LEFT JOIN
    deposit_requests dr ON l.id = dr.lead_id
WHERE
    op.status = 'completed'
    AND dr.status = 'completed';


